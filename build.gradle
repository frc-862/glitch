plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.22"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

wpi {
    //wpilibVersion = "2018.2.2"
    shuffleboardVersion = "1.2.0"
}

def TEAM = 862
def ROBOT_CLASS = "org.usfirst.frc862.glitch.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

configurations {
    // Define a custom config for RobotBuilder so it can have its own dependencies independent from compile
    robotBuilder
}

repositories {
    mavenCentral()
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile navx()

    compile 'org.yaml:snakeyaml:1.19'
    compile 'gov.nist.math:jama:1.0.2'
    compile 'com.googlecode.json-simple:json-simple:1.1'

    // Add everything in the libs folder so that we can add our own libraries
    compile fileTree(dir: "libs", include: "**/*.jar")  // Java libs
    nativeLib fileTree(dir: "libs", include: "**/*.so") // Native libs

    robotBuilder "edu.wpi.first.wpilib:RobotBuilder:3.0.+"

    testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
    test {
        java {
            srcDirs = ["test"]  // Note @Peter's comment below
        }
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

// Task to allow launching robot builder from CLI
task robotBuilder(type: JavaExec) {
    main = "robotbuilder.RobotBuilder"
    classpath configurations.robotBuilder
}

