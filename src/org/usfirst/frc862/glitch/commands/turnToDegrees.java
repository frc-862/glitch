// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.commands;
import com.team254.lib.util.CheesyDriveHelper;
import com.team254.lib.util.DriveSignal;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.glitch.RobotMap;
import org.usfirst.frc862.util.LightningMath;
import org.usfirst.frc862.util.MovingAverageFilter;

/**
 *
 */
public class turnToDegrees extends Command {
    private double degrees = 0;
    private double lastHeading;
    private double targetAngle = 0;
    private boolean done = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public turnToDegrees() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    public turnToDegrees(double d) {
        requires(Robot.driveTrain);
        degrees = d;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.driveTrain.setVelocityMode();
        lastHeading = LightningMath.boundThetaNeg180to180(Robot.core.getGyroAngle());
        targetAngle = LightningMath.boundThetaNeg180to180(degrees + lastHeading);
        done = false;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double currentHeading = LightningMath.boundThetaNeg180to180(Robot.core.getGyroAngle());

        double rotpwr = currentHeading * Constants.PRotate;
        rotpwr = Math.max(rotpwr, Constants.MinRotatePower);
        rotpwr = Math.min(rotpwr, 1);
        Robot.driveTrain.setPower(rotpwr, -rotpwr);

        done  = LightningMath.isInRange(currentHeading, targetAngle, Constants.ANGLE_TOLERANCE_DEGREES);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }


}
