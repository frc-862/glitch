// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.TimedCommand;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.glitch.paths.*;
import org.usfirst.frc862.glitch.subsystems.ShineBois;
import org.usfirst.frc862.util.DynamicPathCommandBase;
import org.usfirst.frc862.util.Logger;

/**
 *
 */
public class ScaleOutsideAuton extends Command {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ScaleOutsideAuton() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        ShineBois.rainbow();

        DriverStation.Alliance alliance=DriverStation.getInstance().getAlliance();
        CommandGroup cmd;

        Robot.shifter.forceDownShift();

        // CUBE 1: deposit at scale
        cmd = buildScale();

        // Rotate toward cubes and get ready to collect
        // TODO verify rotation angle (for correct side)
        cmd.addSequential(new BackupSlow());
        cmd.addSequential(new MoveCollectorToCollect());

        cmd.start();
    }

    private CommandGroup buildScale() {
        boolean leftStart = Robot.startOnLeft();
        boolean leftScale = Robot.scaleOnLeft();

        CommandGroup cmd = new CommandGroup();

        cmd.addParallel(new HoldCube());

        DynamicPathCommandBase path;

        if (leftStart && leftScale) {
            Logger.info("Using Left Scale Near");
            path = new LeftScaleNearLG();
        } else if (leftStart && !leftScale) {
            Logger.info("Using Left Scale Far");
            path = new RightScaleNearLG();
        } else if (!leftScale) {
            Logger.info("Using Right Scale Near");
            // If we made it this far, we have to be on the right side
            path = new RightScaleNearOutsideLG();
        } else {
            // Must be right far
            Logger.info("Using Right Scale Far");
            path = new RightScaleFarLG();
        }

        CommandGroup riseUp = new CommandGroup();
        if (path.duration() > 4) {
            riseUp.addSequential(new TimedCommand(path.duration() - 4));
        }
        riseUp.addSequential(new MoveCollectorToScale());
        cmd.addParallel(riseUp);

        cmd.addSequential(path);

        cmd.addSequential(new EjectCube(), 1);

        return cmd;
    }


    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

}
