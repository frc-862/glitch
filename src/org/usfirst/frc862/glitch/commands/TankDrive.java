// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.glitch.subsystems.ShineBois;
import org.usfirst.frc862.util.JoystickFilter;
import org.usfirst.frc862.util.Logger;

/**
 *
 */
public class TankDrive extends Command {
    private final JoystickFilter leftFilter = new JoystickFilter(Constants.dead_band,
            Constants.STICKTION_SPEED_IPS, 1, JoystickFilter.Mode.SQUARED);
    private final JoystickFilter rightFilter = new JoystickFilter(Constants.dead_band, Constants.STICKTION_SPEED_IPS, 1, JoystickFilter.Mode.SQUARED);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TankDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        ShineBois.chase();
        Robot.driveTrain.setVelocityMode();
        Logger.info("Start Tank");

        leftFilter.setRampDelta(Constants.VEL_COMMAND_RAMP);
        rightFilter.setRampDelta(Constants.VEL_COMMAND_RAMP);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if (Robot.lift.isHighCG())
        {
            leftFilter.setRampDelta(Constants.VEL_COMMAND_RAMP_HIGH_CG);
            rightFilter.setRampDelta(Constants.VEL_COMMAND_RAMP_HIGH_CG);
        } else {
            leftFilter.setRampDelta(Constants.VEL_COMMAND_RAMP);
            rightFilter.setRampDelta(Constants.VEL_COMMAND_RAMP);
        }
        double leftY = leftFilter.filter(Robot.oi.getLeftPower());
        double rightY = rightFilter.filter(Robot.oi.getRightPower());

        SmartDashboard.putNumber("left joy", leftY);
        SmartDashboard.putNumber("right joy", rightY);

        Robot.driveTrain.setVelocityPercent(leftY, rightY);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Logger.info("End Tank");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
