// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.util.XBoxController;

/**
 *
 */
public class CoPilotAuto extends Command {
    private XBoxController copilot;
    private boolean dropMode = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CoPilotAuto() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lift);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.gripper);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        copilot = Robot.oi.copilot;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double power = copilot.getLeftTrigger() - copilot.getRightTrigger();
        if (Math.abs(power) < Constants.COLLECT_TRIGGER_DEADZONE) {
            power = 0;
        }

        if (copilot.leftBumper.get()) {
            power = Constants.DEFAULT_COLLECT_POWER;
        }
        else if(copilot.rightBumper.get()) {
            power = Constants.DEFAULT_EJECT_POWER;
        }
        Robot.gripper.setPower(power);

        // Y
        //X B
        // A
        if(copilot.aButton.get()) {
            Robot.lift.moveToCollect();
        } else if(copilot.xButton.get()) {
            Robot.lift.moveToBottom();
        } else if(copilot.bButton.get()) {
            Robot.lift.moveToSwitch();
        } else if(copilot.yButton.get()) {
            Robot.lift.moveToScale();
        } else if (copilot.isDPadDown()) {
            dropMode = Robot.lift.setDropMode();
        }

        if (dropMode && !copilot.isDPadDown()) {
            Robot.lift.exitDropMode();
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
