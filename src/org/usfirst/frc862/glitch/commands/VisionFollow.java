// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.commands;
import com.team254.lib.util.CheesyDriveHelper;
import com.team254.lib.util.DriveSignal;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import javax.naming.TimeLimitExceededException;

import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.glitch.vision.CubeNotFoundException;
import org.usfirst.frc862.glitch.vision.PowerCube;
import org.usfirst.frc862.util.MovingAverageFilter;

/**
 *
 */
public class VisionFollow extends Command {
	private final CheesyDriveHelper drive;
    private double heading = 0;
    private double lastTime = 0;
    private double lastHeading;
    private MovingAverageFilter velocityAverage = new MovingAverageFilter(10);
    private Timer timer;
    private double ramp_time = 1.0;
    private double cubeStartTime = 0;

    private enum State { turning, vision_align, turn_hysterisis };
    private enum Ramp { long_range, medium_range, short_range };
    State state = State.turning;
    private Ramp ramp;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public VisionFollow() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.cubeVision);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
        
        drive = new CheesyDriveHelper();
    }

    // Called just before this Command runs the first time
 // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	timer = new Timer();
    	timer.start();
        Robot.driveTrain.setVelocityMode();
        state = State.turning;
        ramp = Ramp.medium_range;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
//        double left= Robot.oi.getThrust();
//        double right = Robot.oi.getThrust();
//        left-=Robot.oi.getRotation();
//        right+=Robot.oi.getRotation();
//        left= LightningMath.limit(left,-1,1);
//        right = LightningMath.limit(right,-1,1);
//        Robot.driveTrain.setPower(left,right);

        double start = Timer.getFPGATimestamp();

        double rot = Robot.oi.getRotation();
        rot = rot * rot * rot;
        double pwr = Robot.oi.getThrust();
        boolean quickTurn = Robot.oi.getQuickTurn();

        double dt = lastTime - start;
        lastTime = start;

        double newHeading = Robot.core.getGyroAngle();
        velocityAverage.filter((lastHeading - newHeading) / dt);
        lastHeading = newHeading;

        SmartDashboard.putNumber("angular velocity", velocityAverage.get());

        switch (state) {
            case turning:
                if (Math.abs(rot) < Constants.NotStraight) {
                    state = State.turn_hysterisis;
                }

                if (Math.abs(pwr) < Constants.dead_band) {
                    quickTurn = true;
                }
                break;

            case vision_align:
                if (Math.abs(rot) > Constants.NotStraight) {
                    state = State.turning;
                } else {
                    double err = 0;
                    try {
                    	PowerCube cube = Robot.cubeVision.getBestCube();
                        if(cubeStartTime == 0) {
                        	cubeStartTime = timer.get();
                        	if(cube.getLongitudal() > 14) ramp = Ramp.long_range;
                        	else if(cube.getLongitudal() < 6) ramp = Ramp.short_range;
                        	else ramp = Ramp.medium_range;
                        }
                    	err = cube.getAngle();
                    	SmartDashboard.putNumber("Cube area", cube.getArea());
                    	SmartDashboard.putString("VisionArcadeError", "None");
                    	switch(ramp) {
                    		case long_range:
                    			pwr = Math.pow(9, cube.getLongitudal() - 9);
                    			ramp_time = 1.0;
                            	break;
                    		case medium_range:
                    			pwr = Math.pow(6, cube.getLongitudal() - 6);
                    			ramp_time = 1.0;
                    			break;
                    		case short_range:
                    			pwr = cube.getLongitudal() / 5;
                    			//pwr = Math.pow(2, cube[2] - 2);
                    			ramp_time = 1.0;
                    			break;
                    	}
                    	if(pwr < 0.2) pwr = 0.2;
                    	if(pwr > 1) pwr = 1;
                    	if(ramp == Ramp.short_range && pwr > 0.8) pwr = 0.8;
                    	double time = timer.get();
                    	if(time - cubeStartTime < ramp_time && pwr >= 0.2) {
                    		 double percent = Math.abs((time - cubeStartTime)) / ramp_time;
                             pwr *= percent;
                    	}
                    }
                    catch(CubeNotFoundException e) {
                    	SmartDashboard.putString("VisionArcadeError", e.getMessage());
                    	cubeStartTime = 0;
                    }
                    if (Math.abs(err) > Constants.StraightMarginOfError) {
                        SmartDashboard.putNumber("Theta Error", err);

                        if (Robot.shifter.isHighGear()) {
                            rot = err * Constants.StraightenKpHighGear;
                        } else {
                            rot = err * Constants.StraightenKpLowGear;
                        }
                        SmartDashboard.putNumber("Theta Correct", rot);
                        quickTurn = true;
                    }
                }
                break;

            case turn_hysterisis:
                if (Math.abs(velocityAverage.get()) < Constants.NotTurning) {
                    state = State.vision_align;
                    heading = Robot.core.getGyroAngle();
                }
                break;
        }

        SmartDashboard.putBoolean("quickturn", quickTurn);
        SmartDashboard.putString("arcade mode", state.toString());
        DriveSignal power = drive.cheesyDrive(pwr, rot, quickTurn, Robot.shifter.isHighGear());
        Robot.driveTrain.setVelocity(power);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    	timer.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
