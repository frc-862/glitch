// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.glitch.paths.*;
import org.usfirst.frc862.glitch.subsystems.ShineBois;
import org.usfirst.frc862.util.DynamicPathCommand;
import org.usfirst.frc862.util.TimedTriggers;

/**
 *
 */
public class ScaleAuton extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ScaleAuton() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        ShineBois.rainbow();

        DriverStation.Alliance alliance=DriverStation.getInstance().getAlliance();
        CommandGroup cmd;

//        if (alliance == DriverStation.Alliance.Blue) {
//            cmd = blueAlliance();
//        } else {
//            cmd = redAlliance();
//        }
        cmd = buildScale();

        cmd.addSequential(new EjectCube());
        cmd.start();
    }

    private CommandGroup buildScale() {
        boolean leftStart = Robot.startOnLeft();
        boolean leftScale = Robot.scaleOnLeft();

        CommandGroup cmd = new CommandGroup();
        DynamicPathCommand path;

        if (leftStart && leftScale) {
            path = new LeftScaleNear();
        } else if (leftStart && !leftScale) {
            path = new LeftScaleFar();
        } else if (!leftScale) {
            // If we made it this far, we have to be on the right side
            path = new RightScaleNear();
        } else {
            // Must be right far
            path = new RightScaleFar();
        }

        cmd.addParallel(path);
        TimedTriggers triggers = new TimedTriggers();
        triggers.addAction(new MoveCollectorToGround(), path.duration() - 3);
        triggers.addAction(new EjectCube(), path.duration() - 0.1);
        cmd.addParallel(triggers);

        if (Robot.attemptMultiCubeAuton()) {
            cmd.addSequential(new MoveCollectorToGround());
            cmd.addParallel(new turnToDegrees(180));
            cmd.addSequential(new VisionCollect());

            boolean leftSwitch = Robot.switchOnLeft();
            // TODO fix this, to use conditional command, because we should always have ~15 seconds here
            if (leftScale == leftSwitch && Robot.autonTimeRemaining() < Constants.AutonScaleTime) {
                // we are already on the same side as the switch, let's dump one in there
                cmd.addSequential(new MoveCollectorToSwitch());
                cmd.addSequential(new EjectCube());
            } else {
                // TODO use turn to absolute angle (and adjust for left/right scale)
                cmd.addSequential(new turnToDegrees(0));
                cmd.addParallel(new MoveCollectorToScale());
                // TODO write this path
                // cmd.addSequential(new CubeToScale());
                cmd.addSequential(new EjectCube());
            }
        }


        return cmd;
    }


    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

}
