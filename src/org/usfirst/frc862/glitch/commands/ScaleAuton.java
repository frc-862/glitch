// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.ConditionalCommand;
import edu.wpi.first.wpilibj.command.TimedCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.glitch.paths.*;
import org.usfirst.frc862.glitch.subsystems.ShineBois;
import org.usfirst.frc862.util.*;

/**
 *
 */
public class ScaleAuton extends Command {
    private final boolean no_cross;
    private boolean is_near;
    private boolean is_far;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ScaleAuton() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        no_cross = false;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    public ScaleAuton(boolean no_cross) {
        this.no_cross = no_cross;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        ShineBois.rainbow();

        Robot.shifter.forceUpShift();

        CommandGroup cmd;

        if (no_cross) {
            cmd = buildNoCross();
        } else {
            cmd = buildScale();
        }
//        CommandGroup cmd = new CommandGroup();

        // SL   RL  Near
        // T    T   T
        // T    F   F
        // F    T   F
        // F    F   T
        is_near = Robot.scaleOnLeft() == Robot.startOnLeft();
        is_far = !is_near;

        CommandGroup readyToCollect = new CommandGroup();
        readyToCollect.addSequential(new TimedCommand(0.5));
        readyToCollect.addSequential(new MoveCollectorToCollect());
        cmd.addParallel(readyToCollect);

        double angle1 = SmartDashboard.getNumber("Auto Angle 1", 862);
        double angle2 = SmartDashboard.getNumber("Auto Angle 1", 862);

        if (no_cross && Robot.attemptMultiCubeAuton() && !Robot.nearSide()) {
            // do nothing
        } else if (Robot.attemptMultiCubeAuton()) {
            if (Robot.startOnLeft()) {
                if (Robot.scaleOnLeft()) {
                    cmd.addSequential(new TurnToAbsolutePosition((angle1 < 360) ? angle1 : 165), 2.5);
                } else {
                    // far side
                    cmd.addSequential(new TimedCommand(.5));
                    cmd.addSequential(new TurnToAbsolutePosition((angle1 < 360) ? angle1 : -160), 2.5);
                }
            } else {
                if (Robot.scaleOnLeft()) {
                    // far side
                    cmd.addSequential(new TimedCommand(.5));
                    cmd.addSequential(new TurnToAbsolutePosition((angle1 < 360) ? angle1 : 160, true), 2.5);
                } else {
                    cmd.addSequential(new TurnToAbsolutePosition((angle1 < 360) ? angle1 : -165), 2.5);
                }
            }
            // todo reduce timeout
            cmd.addSequential(new VisionRotate(Robot.scaleOnLeft() ? 1 : -1), 2);

            cmd.addSequential(new MoveCollectorToCollect(), 1);
            cmd.addParallel(new HoldCube());
            cmd.addSequential(new DriveForwardToCube());
            // todo remove timeout
            cmd.addSequential(new GentleCollectCube(), 5);

            cmd.addParallel(new HoldCube());
            if (Robot.scaleOnLeft()) {
                cmd.addSequential(new TurnToAbsolutePosition((angle2 < 360) ? angle2 : -10));
            } else {
                cmd.addSequential(new TurnToAbsolutePosition((angle2 < 360) ? angle2: 5));
            }

            cmd.addSequential(new MoveCollectorToScale(), 1);
            cmd.addSequential(new DriveForwardToScale());

            cmd.addSequential(new EjectCube(0.6), 0.5);
            cmd.addSequential(new TurnToAbsolutePosition(180));
            cmd.addSequential(new MoveCollectorToCollect());
        } else {
            cmd.addSequential(new BackupSlow());
        }
        cmd.start();
    }

    private CommandGroup buildScale() {
        boolean leftStart = Robot.startOnLeft();
        boolean leftScale = Robot.scaleOnLeft();

        CommandGroup cmd = new CommandGroup();

        if (Robot.getAutonDelay() > 0) {
            cmd.addSequential(new TimedCommand(Robot.getAutonDelay()));
        }

        cmd.addParallel(new HoldCube());

        DynamicPathCommandBase path;

        if (leftStart && leftScale) {
            Logger.info("Using Left Scale Near");
            path = new LeftScaleNear();
        } else if (leftStart && !leftScale) {
            Logger.info("Using Left Scale Far");
            path = new LeftScaleFar();
        } else if (!leftScale) {
            Logger.info("Using Right Scale Near");
            // If we made it this far, we have to be on the right side
            if (Robot.attemptMultiCubeAuton()) {
                path = new RightScaleNear();
            } else {
                path = new RightScaleSingle();
            }
        } else {
            // Must be right far
            Logger.info("Using Right Scale Far");
            path = new RightScaleFar();
        }

        CommandGroup riseUp = new CommandGroup();
        if (path.duration() > 4) {
            riseUp.addSequential(new TimedCommand(path.duration() - 4));
        }
        riseUp.addSequential(new MoveCollectorToScale());
        cmd.addParallel(riseUp);

        CommandGroup earlyEject = new CommandGroup();
        earlyEject.addSequential(new TimedCommand(path.duration() - 0.3));
        earlyEject.addSequential(new EjectCube(0.6), 0.5);
        cmd.addParallel(earlyEject);

        cmd.addSequential(path);

        cmd.addSequential(new EjectCube(is_far ? 0.3 : 0.6), 0.5);
//        cmd.addSequential(new EjectCube(0.6), 0.5);

        return cmd;
    }

    CommandGroup buildNoCross() {
        if (Robot.nearSide()) {
           return buildScale();
        }

        CommandGroup cmd = new CommandGroup();

        cmd.addParallel(new HoldCube());
        if (Robot.switchOnLeft() && Robot.startOnLeft()) {
            cmd.addParallel(new MoveCollectorToSwitch());
            cmd.addSequential(new LeftPointsSwitch());
            cmd.addSequential(new EjectCube(0.6), 0.5);
        } else if (!Robot.switchOnLeft() && Robot.startOnRight()) {
            cmd.addParallel(new MoveCollectorToSwitch());
            cmd.addSequential(new RightPointsSwitch());
            cmd.addSequential(new EjectCube(0.6), 0.5);
        } else if (Robot.startOnRight()) {
            cmd.addSequential(new TimedCommand(5));
            cmd.addSequential(new RightScaleFarStopEarly());
        } else {
            cmd.addSequential(new TimedCommand(5));
            cmd.addSequential(new LeftScaleFarStopEarly());
        }

        return cmd;
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

}
