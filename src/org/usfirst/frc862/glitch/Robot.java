// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch;

import edu.wpi.cscore.AxisCamera;
import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.CameraServer;
import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc862.glitch.commands.*;
import org.usfirst.frc862.glitch.subsystems.*;
import org.usfirst.frc862.util.CrashTracker;
import org.usfirst.frc862.util.DataLogger;
import org.usfirst.frc862.util.Logger;
import org.usfirst.frc862.util.Looper;

import java.io.File;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {


    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Core core;
    public static Shifter shifter;
    public static Gripper gripper;
    public static FourBar fourBar;
    public static Elevator elevator;
    public static ShineBois shineBois;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static RobotStateEstimator robotStateEstimator;
    Command autonomousCommand;
    SendableChooser<String> sideChooser = new SendableChooser<>();
    SendableChooser<String> leverChooser = new SendableChooser<>();
    SendableChooser<String> allianceChooser = new SendableChooser<>();
    
    private Looper fastLooper;
    private Looper slowLooper;

    public static void resetLoggingFiles() {
        DriverStation ds = DriverStation.getInstance();
        String fn = "robot";
        switch (ds.getMatchType()) {
            case Practice:
                fn = String.format("practice-%d-%d", ds.getMatchNumber(), ds.getReplayNumber());
                break;

            case Qualification:
                fn = String.format("qual-%d-%d", ds.getMatchNumber(), ds.getReplayNumber());
                break;

            case Elimination:
                fn = String.format("elim-%d-%d", ds.getMatchNumber(), ds.getReplayNumber());
                break;

            default:
                break;
        }
        Logger.setBaseFileName(fn);
        DataLogger.setBaseFileName(fn);
    }

    @Override
    protected void loopFunc() {
        try {
            super.loopFunc();
        } catch (Throwable t) {
            // ported from https://github.com/wpilibsuite/allwpilib/pull/926/commits
            // to better report unexpected exceptions
            Throwable cause = t.getCause();
            if (cause != null) {
                t = cause;
            }
            CrashTracker.logThrowableCrash(cause);
            DriverStation.reportError("Unhandled exception: " + t.toString(),
                    t.getStackTrace());
            DriverStation.reportWarning("Robots should not quit, but yours did!", false);
            DriverStation.reportError(
                    "The loopFunc() method (or methods called by it) should have handled "
                            + "the exception above.", false);

            System.exit(1);
        }

    }

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        core = new Core();
        shifter = new Shifter();
        gripper = new Gripper();
        fourBar = new FourBar();
        elevator = new Elevator();
        shineBois = new ShineBois();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        robotStateEstimator = new RobotStateEstimator(driveTrain, core);

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addObject("SmartAutonSelector", new SmartAutonSelector());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        sideChooser.addDefault("Left", "left");
        sideChooser.addObject("Right", "right");
        
        leverChooser.addDefault("Scale", "scale");
        leverChooser.addObject("Switch", "switch");
        
        allianceChooser.addDefault("Blue", "blue");
        allianceChooser.addObject("Red", "red");

        allianceChooser.addDefault("hi", "hi");
        
        SmartDashboard.putData("Side", sideChooser);
        SmartDashboard.putData("Switch/Scale", leverChooser);
        SmartDashboard.putData("Alliance", allianceChooser);


        new Thread(() -> {
            AxisCamera camera = CameraServer.getInstance().addAxisCamera("10.8.62.3");

            CvSink cvSink = CameraServer.getInstance().getVideo();
            CvSource outputStream = CameraServer.getInstance().putVideo("hello", 640, 480);

            Mat source = new Mat();
            Mat output = new Mat();

            while (!Thread.interrupted()) {
                cvSink.grabFrame(source);
                outputStream.putFrame(output);
            }
        }).start();

        Robot.resetLoggingFiles();

        slowLooper = new Looper(Constants.slowLoopRate);
        fastLooper = new Looper(Constants.fastLoopRate);

        slowLooper.register(Logger.getWriter());
        slowLooper.register(DataLogger.getLogger().getLogWriter());
        fastLooper.register(DataLogger.getLogger());

        slowLooper.start();
        fastLooper.start();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit() {
        DataLogger.flush();
        Logger.getWriter().flush();
    }

    // get rid of overload me message
    @Override
    public void robotPeriodic() { }

    @Override
    public void disabledPeriodic() { Scheduler.getInstance().run(); }

    @Override
    public void autonomousInit() {
    	
    	//TODO CHANGE THIS TO SELECT THE RIGHT AUTON WITH THE DIFFERENT SIDES
    	//TODO ALSO SEE IF WE SHOULD USE STATE MACHINE INSTEAD BECAUSE IT'S PROBABLY BETTER
    		//I JUST DON'T KNOW HOW TO DO IT IN THIS CASE
    	
    	if (leverChooser.getSelected().equals("scale")) {
    		if (sideChooser.getSelected().equals("left"))
    			autonomousCommand = new ScaleAuton();
    		else if (sideChooser.getSelected().equals("right"))
    			autonomousCommand = new ScaleAuton();
    	} else if (leverChooser.getSelected().equals("switch")) {
    		if (sideChooser.getSelected().equals("left"))
    			autonomousCommand = new SwitchAuton();
    		else if (sideChooser.getSelected().equals("right"))
    			autonomousCommand = new SwitchAuton();
    	}
    	
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() { Scheduler.getInstance().run(); }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    @Override
    public void teleopPeriodic() { Scheduler.getInstance().run(); }

    public static boolean isOBot() {
        return new File("/home/lvuser/obot").exists();
    }

    public static boolean isEcho() {
        return new File("/home/lvuser/echo").exists();
    }
    
    public String getSide() {
    	return sideChooser.getSelected();
    }
    
    public String getLever() {
    	return leverChooser.getSelected();
    }
    
    public String getAlliance() {
    	return allianceChooser.getSelected();
    }
    
}
