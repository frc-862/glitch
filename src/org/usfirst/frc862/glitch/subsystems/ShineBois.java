// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.subsystems;

import org.usfirst.frc862.glitch.RobotMap;
import org.usfirst.frc862.glitch.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.CANifier;
import edu.wpi.first.wpilibj.DigitalOutput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ShineBois extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANifier lEDs = RobotMap.shineBoisLEDs;
    private final DigitalOutput seventh = RobotMap.shineBoisSeventh;
    private final DigitalOutput eighth = RobotMap.shineBoisEighth;
    private final DigitalOutput ninth = RobotMap.shineBoisNinth;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double HSV[] = {0.0, 1.0, 1.0};
    private static final double NUM_LEDS = 30;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new LEDSolidOrange());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void resetLEDs() {
        for(int i = 0; i < NUM_LEDS; i++) {
            RobotMap.shineBoisLEDs.setLEDOutput(0, CANifier.LEDChannel.LEDChannelA);
            RobotMap.shineBoisLEDs.setLEDOutput(0, CANifier.LEDChannel.LEDChannelB);
            RobotMap.shineBoisLEDs.setLEDOutput(0, CANifier.LEDChannel.LEDChannelC);
        }
    }

    public void orange() {
        RobotMap.shineBoisLEDs.setLEDOutput(100, CANifier.LEDChannel.LEDChannelA);
        RobotMap.shineBoisLEDs.setLEDOutput(20, CANifier.LEDChannel.LEDChannelB);
        RobotMap.shineBoisLEDs.setLEDOutput(0, CANifier.LEDChannel.LEDChannelC);
    }

    public void green() {
        RobotMap.shineBoisLEDs.setLEDOutput(0, CANifier.LEDChannel.LEDChannelA);
        RobotMap.shineBoisLEDs.setLEDOutput(100, CANifier.LEDChannel.LEDChannelB);
        RobotMap.shineBoisLEDs.setLEDOutput(10, CANifier.LEDChannel.LEDChannelC);
    }

    public void purple() {
        RobotMap.shineBoisLEDs.setLEDOutput(100, CANifier.LEDChannel.LEDChannelA);
        RobotMap.shineBoisLEDs.setLEDOutput(100, CANifier.LEDChannel.LEDChannelB);
        RobotMap.shineBoisLEDs.setLEDOutput(0, CANifier.LEDChannel.LEDChannelC);
    }

    public void rainbow() {
        new Thread(() -> {
            RobotMap.shineBoisLEDs.setLEDOutput(toRGB(HSV)[0], CANifier.LEDChannel.LEDChannelA);
            RobotMap.shineBoisLEDs.setLEDOutput(toRGB(HSV)[1], CANifier.LEDChannel.LEDChannelB);
            RobotMap.shineBoisLEDs.setLEDOutput(toRGB(HSV)[2], CANifier.LEDChannel.LEDChannelC);

            HSV[0]++;
        });
    }

    private double[] toRGB(double[] old) {
        double h = old[0], s = old[1], v = old[2];
        double[] newBoi = new double[3];
        double c = v * s, x = c * (1 - Math.abs((h / 60.0) % 2 - 1)), m = v - c;
        if (h >= 0 && h < 60) {
            newBoi[0] = c;
            newBoi[1] = x;
            newBoi[2] = 0;
        } else if (h >= 60 && h < 120) {
            newBoi[0] = x;
            newBoi[1] = c;
            newBoi[2] = 0;
        } else if (h >= 120 && h < 180) {
            newBoi[0] = 0;
            newBoi[1] = c;
            newBoi[2] = x;
        } else if (h >= 180 && h < 240) {
            newBoi[0] = 0;
            newBoi[1] = x;
            newBoi[2] = c;
        } else if (h >= 240 && h < 300) {
            newBoi[0] = x;
            newBoi[1] = 0;
            newBoi[2] = c;
        } else if (h >= 300 && h < 360) {
            newBoi[0] = c;
            newBoi[1] = 0;
            newBoi[2] = x;
        }

        for (int i = 0; i < 3; i++) {
            newBoi[i] = (newBoi[i] + m) * 255;
        }

        return newBoi;

    }

}

