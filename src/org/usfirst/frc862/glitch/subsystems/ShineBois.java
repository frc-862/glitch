// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.subsystems;

import edu.wpi.first.wpilibj.Timer;
import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.glitch.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalOutput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ShineBois extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    private enum states {green, purple, rainbow, chase, off}
    private static states current = states.off;
    private static states alert = states.off;
    double alertEnd = Timer.getFPGATimestamp() + Constants.ALERT_DURATION;


    @Override
    public void periodic() {
        // Put code here to be run every loop
        checkAlertTimeout();
    }

    public void checkAlertTimeout() {
        if (alertEnd > Timer.getFPGATimestamp()) {
            setLEDColor(alert);
        } else {
            if (alert != states.off) {
                alert = states.off;
                Robot.oi.rumbleOff();
            }
            setLEDColor(current);
        }
    }

    private void setLEDColor(states state) {
        switch (state) {
            case green:
                stateGreen();
                break;
            case purple:
                statePurple();
                break;
            case rainbow:
                stateRainbow();
                break;
            case chase:
                stateChase();
                break;
            case off:
                stateOff();
                break;
        }
    }

    public static void green() {
        alert = states.green;

    }

    public static void purple() {
        alert = states.purple;
    }

    public static void rainbow() {
        current = states.rainbow;
    }

    public static void chase() {
        current = states.chase;
    }

    public static void reset() {
        current = states.off;
        alert = states.off;
    }

    private static void stateGreen() {
        RobotMap.shineBoisEighth.set(false);
        RobotMap.shineBoisNinth.set(false);
        RobotMap.shineBoisSeventh.set(true);
    }

    private static void stateChase() {
        RobotMap.shineBoisSeventh.set(false);
        RobotMap.shineBoisNinth.set(false);
        RobotMap.shineBoisEighth.set(true);
    }

    private static void statePurple() {
        RobotMap.shineBoisSeventh.set(false);
        RobotMap.shineBoisEighth.set(false);
        RobotMap.shineBoisNinth.set(true);
    }

    private static void stateRainbow() {
        RobotMap.shineBoisNinth.set(false);
        RobotMap.shineBoisSeventh.set(true);
        RobotMap.shineBoisEighth.set(true);
    }

    private static void stateOff() {
        RobotMap.shineBoisSeventh.set(false);
        RobotMap.shineBoisEighth.set(false);
        RobotMap.shineBoisNinth.set(false);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.


}

