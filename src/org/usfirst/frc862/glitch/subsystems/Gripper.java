// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.subsystems;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.RobotMap;
import org.usfirst.frc862.glitch.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import org.usfirst.frc862.util.DataLogger;
import org.usfirst.frc862.util.ExponentialSmoothingFilter;
import org.usfirst.frc862.util.ValueFilter;


/**
 *
 */
public class Gripper extends Subsystem {
    // 0.015 should allow just over a second at full power before throttling down
    // pulsing the control will allow more time at higher voltages
    ValueFilter powerFilter = new ExponentialSmoothingFilter(0.015);
    private static double powerReduce = 1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_VictorSPX leftGripper = RobotMap.gripperLeftGripper;
    private final WPI_VictorSPX rightGripper = RobotMap.gripperRightGripper;
    private final DigitalInput cubeSensor = RobotMap.gripperCubeSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    private DigitalInput cubeSensor;
//    private AdaFruitVL6180X tof;

    public Gripper() {
        leftGripper.setSubsystem("Gripper");
        rightGripper.setSubsystem("Gripper");

        rightGripper.setInverted(true);

        DataLogger.addDataElement("Left Gripper", () -> leftGripper.getMotorOutputVoltage());
        DataLogger.addDataElement("Right Gripper", () -> rightGripper.getMotorOutputVoltage());
        DataLogger.addDataElement("Filtered Gripper", () -> powerFilter.get());

//        cubeSensor = new DigitalInput(1);
//        try {
//            tof = new AdaFruitVL6180X(I2C.Port.kOnboard);
//            Logger.info("Initialized Time of Flight " + tof);
//        } catch (Exception err) {
//            Logger.error("Time of Flight error: " + err);
//        }
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new WaitForCube());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

//        waitForCube = new WaitForCube();
//        waitWithCube = new WaitWithCube();

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    public void startWaitForCube(){
    }

    public void startWaitWithCube(){
    }

    @Override
    public void periodic() {
//        Logger.info("gripper periodic");
//        try {
//            SmartDashboard.putNumber("Time of Flight", tof.readRange());
//            Logger.info("tof " + tof.readRange());
//        } catch (Exception err) {
//            Logger.error("Time of Flight read error: " + err);
//        }

        SmartDashboard.putString("Cube Sensor", cubeSensor.get() ? "On" : "Off");
        SmartDashboard.putData("CubeSensor", cubeSensor);
        SmartDashboard.putBoolean("haveCube", hasCube());
        SmartDashboard.putNumber("timer", Timer.getFPGATimestamp());

        // Put code here to be run every loop
        double current = Math.max(leftGripper.getOutputCurrent(), rightGripper.getOutputCurrent());
        if (powerFilter.filter(current) > 25) {
           // 0.5 is 6V which appears to be safe on the bag motor.
           powerReduce = 0.5;
        } else {
           powerReduce = 1;
        }
    }

    public void stopIntake() {
        leftGripper.set(0);
        rightGripper.set(0);
    }

    public void collectCube() {
        leftGripper.set(1 * powerReduce);
        rightGripper.set(1 * powerReduce);
    }

    //Fix
    public void holdCube() {
        leftGripper.set(Constants.DEFAULT_HOLD_POWER);
        rightGripper.set(Constants.DEFAULT_HOLD_POWER);
    }

    public void ejectCube(double pwr) {
        leftGripper.set(-pwr * powerReduce);
        rightGripper.set(-pwr * powerReduce);
    }

    public void ejectCube() {
        leftGripper.set(-1 * powerReduce);
        rightGripper.set(-1 * powerReduce);
    }

    private boolean haveCube = false;
    public boolean hasCube() {
        if (cubeSensor.get()) {
            if (!haveCube) {
                ShineBois.green();
            }
            haveCube = true;
        } else {
            haveCube = false;
        }

        return haveCube;
    }

    public void setPower(double left, double right) {
        leftGripper.set(left);
        rightGripper.set(right);
    }

    public void setPower(double collectPower) {
        if (collectPower > 0) {
            leftGripper.set(collectPower * powerReduce);
            rightGripper.set(collectPower * powerReduce);
        } else {
            leftGripper.set(collectPower * powerReduce);
            rightGripper.set(collectPower * powerReduce);
        }
    }

    private boolean pulse = false;
    private double pulseTime = 0;
    public void setPulsePower(double collectPower) {
        if (Timer.getFPGATimestamp() - pulseTime > 0.2) {
            if (pulse) {
                leftGripper.set(collectPower * powerReduce);
                rightGripper.set(-0.2 * powerReduce);
            } else {
                leftGripper.set(-0.2 * powerReduce);
                rightGripper.set(collectPower * powerReduce);
            }
            pulse = !pulse;
            pulseTime = Timer.getFPGATimestamp();
        }
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

