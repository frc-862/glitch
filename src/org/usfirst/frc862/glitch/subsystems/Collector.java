// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.subsystems;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc862.glitch.Constants;
import org.usfirst.frc862.glitch.RobotMap;
import org.usfirst.frc862.glitch.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import org.usfirst.frc862.util.DataLogger;
import org.usfirst.frc862.util.ExponentialSmoothingFilter;
import org.usfirst.frc862.util.ValueFilter;


/**
 *
 */
public class Collector extends Subsystem {
    // pulsing the control will allow more time at higher voltages
    private final ValueFilter powerFilter = new ExponentialSmoothingFilter(Constants.COLLECTOR_SMOOTHING_FACTOR);
    private static double powerReduce = 1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_VictorSPX leftGripper = RobotMap.gripperLeftGripper;
    private final WPI_VictorSPX rightGripper = RobotMap.gripperRightGripper;
    private final DigitalInput cubeSensor = RobotMap.gripperCubeSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Collector() {
        leftGripper.setSubsystem("Collector");
        rightGripper.setSubsystem("Collector");

        rightGripper.setInverted(true);

        DataLogger.addDataElement("Left Collector", leftGripper::getMotorOutputVoltage);
        DataLogger.addDataElement("Right Collector", rightGripper::getMotorOutputVoltage);
        DataLogger.addDataElement("Filtered Collector", powerFilter::get);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    }

    @Override
    public void periodic() {
        SmartDashboard.putString("Cube Sensor", cubeSensor.get() ? "On" : "Off");
        SmartDashboard.putData("CubeSensor", cubeSensor);
        SmartDashboard.putBoolean("haveCube", hasCube());
        SmartDashboard.putNumber("timer", Timer.getFPGATimestamp());

        // Put code here to be run every loop
        double voltage = (leftGripper.getMotorOutputVoltage() + rightGripper.getMotorOutputVoltage() / 2.0);
        if (powerFilter.filter(voltage) > 6.0) {
           // 0.5 is 6V which appears to be safe on the bag motor.
           powerReduce = 0.5;
        } else {
           powerReduce = 1;
        }
    }

    public void stopIntake() {
        leftGripper.set(0);
        rightGripper.set(0);
    }

    public void collectCube() {
        leftGripper.set(1 * powerReduce);
        rightGripper.set(1 * powerReduce);
    }

    //Fix
    public void holdCube() {
        leftGripper.set(Constants.DEFAULT_HOLD_POWER);
        rightGripper.set(Constants.DEFAULT_HOLD_POWER);
    }

    public void ejectCube() {
        leftGripper.set(-1 * powerReduce);
        rightGripper.set(-1 * powerReduce);
    }

    private boolean haveCube = false;
    public boolean hasCube() {
        if (cubeSensor.get()) {
            if (!haveCube) {
                ShineBois.green();
            }
            haveCube = true;
        } else {
            haveCube = false;
        }

        return haveCube;
    }

    public void setPower(double collectPower) {
        leftGripper.set(collectPower * powerReduce);
        rightGripper.set(collectPower * powerReduce);
    }
}

